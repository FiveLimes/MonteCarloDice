ggplot(g1_data, aes(x = Number.of.Rolls, y = Monte.Carlo.Expected)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_label(position = 1000, 3.5, aes(label = 'MathExpected')))
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Number of Rolls' = rolls,
'Monte Carlo Expected' = result)
ggplot(g1_data, aes(x = Number.of.Rolls, y = Monte.Carlo.Expected)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_label(position = 1000, 3.5, aes(label = 'MathExpected'))
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Number of Rolls' = rolls,
'Monte Carlo Expected' = result)
ggplot(g1_data, aes(x = Number.of.Rolls, y = Monte.Carlo.Expected)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_label((label = 'MathExpected'))
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Number of Rolls' = rolls,
'Monte Carlo Expected' = result)
ggplot(g1_data, aes(x = Number.of.Rolls, y = Monte.Carlo.Expected)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_label(aes(label = 'MathExpected'))
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Number of Rolls' = rolls,
'Monte Carlo Expected' = result)
ggplot(g1_data, aes(x = Number.of.Rolls, y = Monte.Carlo.Expected)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_label(aes(label = 'MathExpected', position = 1000, 3.5, col = 'red'))
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Number of Rolls' = rolls,
'Monte Carlo Expected' = result)
ggplot(g1_data, aes(x = Number.of.Rolls, y = Monte.Carlo.Expected)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_label(aes(label = 'MathExpected', y =  3.5, col = 'red'))
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Number of Rolls' = rolls,
'Monte Carlo Expected' = result)
ggplot(g1_data, aes(x = Number.of.Rolls, y = Monte.Carlo.Expected)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_label(aes(label = 'MathExpected', x = 1000, y =  3.5, col = 'red'))
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Number of Rolls' = rolls,
'Monte Carlo Expected' = result)
ggplot(g1_data, aes(x = Number.of.Rolls, y = Monte.Carlo.Expected)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_label(aes(label = 'MathExpected', x = 900, y =  3.5, col = 'red'))
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_label(aes(label = 'MathExpected', x = 900, y =  3.5, col = 'red')) +
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_label(aes(label = 'MathExpected', x = 900, y =  3.5, col = 'red'))
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_label(aes(label = 'MathExpected', x = 900, y =  3.5))
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_label(aes(label = 'MathExpected', x = 900, y =  3.5), col = 'red')
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 900, y =  3.5), col = 'red')
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 900, y =  3.0), col = 'red')
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 900, y =  3.25), col = 'red')
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 900, y =  3.25), col = 'red')
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 900, y =  16397), col = 'red')
### Loading Library and creating a function DiceSim that rolls a dice rolls amount of times and compares the result to the expected result
library(tidyverse)
library(ggthemes)
DiceSim <- function(rolls, expected = 3.5, sides = 1:6) {
base::sample(sides, rolls, replace = TRUE) %>%
sum() %>%
"/"(as.numeric(rolls))
}
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 900, y =  3.25), col = 'red')
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 900, y =  16397), col = 'red')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 900, y =  16397), col = 'red')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 90900, y =  16397), col = 'red')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 90900, y =  15397), col = 'red')
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 900, y =  16397), col = 'red')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 90900, y =  15397), col = 'red')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'blue') +
geom_smooth(col = 'green') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'red') +
geom_text(aes(label = 'MathExpected', x = 90900, y =  15397), col = 'red')
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'orange') +
geom_text(aes(label = 'MathExpected', x = 900, y =  3.25), col = 'orange')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g3_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_text(aes(label = 'MathExpected', x = 90900, y =  15397), col = 'orange')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g3_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_text(aes(label = 'Math Expected', x = 90900, y =  15397), col = 'orange') +
geom_text(aes(label = 'Monte-Carlo Expected,x = 0, y = 10000), col = 'lightgreen')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g3_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_text(aes(label = 'Math Expected', x = 90900, y =  15397), col = 'orange')) +
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g3_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_text(aes(label = 'Math Expected', x = 90900, y =  15397), col = 'orange') +
geom_text(aes(label = 'Monte-Carlo Expected', x = 0, y = 10000), col = 'lightgreen')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g3_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_text(aes(label = 'Math Expected', x = 90900, y =  15397), col = 'orange') +
geom_text(aes(label = 'Monte-Carlo Expected', x = 1000, y = 10000), col = 'lightgreen')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g3_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_text(aes(label = 'Math Expected', x = 90900, y =  15397), col = 'orange') +
geom_text(aes(label = 'Monte-Carlo Expected', x = 10000, y = 10000), col = 'lightgreen')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g3_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_few() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_text(aes(label = 'Math Expected', x = 90900, y =  15397), col = 'orange') +
geom_text(aes(label = 'Monte-Carlo Expected', x = 10000, y = 10000), col = 'lightgreen')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g3_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_classic() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_text(aes(label = 'Math Expected', x = 90900, y =  15397), col = 'orange') +
geom_text(aes(label = 'Monte-Carlo Expected', x = 10000, y = 10000), col = 'lightgreen')
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_text(aes(label = 'Monte-Carlo Expected', x = 100, y = 10000), col = 'lightgreen')
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_text(aes(label = 'Monte-Carlo Expected', x = 100, y = 30000), col = 'lightgreen')
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_text(aes(label = 'Math Expected', x = 900, y =  15397), col = 'orange') +
geom_text(aes(label = 'Monte-Carlo Expected', x = 100, y = 30000), col = 'lightgreen')
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_lable(aes(label = 'Math Expected', x = 900, y =  15397), col = 'orange') +
geom_lable(aes(label = 'Monte-Carlo Expected', x = 100, y = 30000), col = 'lightgreen')
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g2_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_label(aes(label = 'Math Expected', x = 900, y =  15397), col = 'orange') +
geom_label(aes(label = 'Monte-Carlo Expected', x = 100, y = 30000), col = 'lightgreen')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g3_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_classic() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_label(aes(label = 'Math Expected', x = 90900, y =  15397), col = 'orange') +
geom_label(aes(label = 'Monte-Carlo Expected', x = 10000, y = 10000), col = 'lightgreen')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g3_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g2_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_classic() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_label(aes(label = 'Math Expected', x = 90900, y =  15397), col = 'orange') +
geom_label(aes(label = 'Monte-Carlo Expected', x = 10000, y = 10000), col = 'lightgreen')
rolls <- seq(1, 100000, 2000)
result <- map_dbl(rolls, DiceSim, sides = c(rep(1:6, 10), 1000000))
g3_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g3_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_classic() +
geom_hline(yintercept = 16397, col = 'orange') +
geom_label(aes(label = 'Math Expected', x = 90900, y =  15397), col = 'orange') +
geom_label(aes(label = 'Monte-Carlo Expected', x = 10000, y = 10000), col = 'lightgreen')
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'orange') +
geom_label(aes(label = 'Math Expected', x = 900, y =  3.5), col = 'orange') +
geom_label(aes(label = 'Monte-Carlo Expected', x = 100, y = 3.5), col = 'lightgreen')
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'orange') +
geom_label(aes(label = 'Math Expected', x = 900, y =  3.0), col = 'orange') +
geom_label(aes(label = 'Monte-Carlo Expected', x = 100, y = 4.0), col = 'lightgreen')
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'orange') +
geom_label(aes(label = 'Math Expected', x = 900, y =  3.25), col = 'orange') +
geom_label(aes(label = 'Monte-Carlo Expected', x = 100, y = 4.0), col = 'lightgreen')
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 3.75, col = 'orange') +
geom_label(aes(label = 'Math Expected', x = 900, y =  3.25), col = 'orange') +
geom_label(aes(label = 'Monte-Carlo Expected', x = 100, y = 4.0), col = 'lightgreen')
#### Creating 100 data points rolling dice a random number of times from 1 to 10000 and comparing the average value to mathematically expected one. In general the more you roll the more accurate your estimate but note diminishing returns. The line is not straight going from 10 to 100 rolls improves the accurecy of the Monte-Carlo estimate much more than going from 1000 to 1090
rolls <- seq(1, 1000, 20)
result <- map_dbl(rolls, DiceSim)
g1_data <- data.frame('Rolls' = rolls,
'Result' = result)
ggplot(g1_data, aes(x = Rolls, y = Result)) +
geom_point(col = 'lightblue') +
geom_smooth(col = 'lightgreen') +
theme_tufte() +
geom_hline(yintercept = 3.5, col = 'orange') +
geom_label(aes(label = 'Math Expected', x = 900, y =  3.25), col = 'orange') +
geom_label(aes(label = 'Monte-Carlo Expected', x = 100, y = 3.75), col = 'lightgreen')
